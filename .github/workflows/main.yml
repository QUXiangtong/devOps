name: CI devops 2025

on:
  push:
    branches: [main, develop]
  pull_request:

jobs:
  test-backend: 
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build and test with Maven
        run: mvn clean verify --file demo/pom.xml

      - name: Run SonarCloud Quality Gate
        run: mvn -B verify sonar:sonar -Dsonar.projectKey="QUXiangtong_devOps" -Dsonar.organization="quxiangtong" -Dsonar.host.url=https://sonarcloud.io -Dsonar.login=${{ secrets.SONAR_TOKEN }} --file demo/pom.xml

  build-and-push-docker-image:
    needs: test-backend
    if: ${{ github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-24.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login --username ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Build image and push backend
        uses: docker/build-push-action@v6
        with:
          context: ./demo
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-devops-backend:latest
          push: true

      - name: Build image and push database
        uses: docker/build-push-action@v6
        with:
          context: ./postgres
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-devops-database:latest
          push: true

      - name: Build image and push httpd
        uses: docker/build-push-action@v6
        with:
          context: ./http-server
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/tp-devops-httpd:latest
          push: true 
  deploy-to-server:
    needs: build-and-push-docker-image
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    steps:
      - name: Setup SSH connection
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy containers on remote server
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'


            docker rm -f backend || true
            docker rm -f postgres || true
            docker rm -f proxy || true
            docker rm -f my-http-container || true  


            docker network create app-network || true

       
            docker pull xiangtong/tp-devops-database:1.0
            docker pull xiangtong/tp-devops-backend:1.0
            docker pull xiangtong/tp-devops-httpd:1.0

       
            docker run -d --name postgres \
              --network app-network \
              -e POSTGRES_DB=db \
              -e POSTGRES_USER=usr \
              -e POSTGRES_PASSWORD=pwd \
              xiangtong/tp-devops-database:1.0

       
            docker run -d --name backend \
              --network app-network \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/db \
              -e SPRING_DATASOURCE_USERNAME=usr \
              -e SPRING_DATASOURCE_PASSWORD=pwd \
              xiangtong/tp-devops-backend:1.0

        
            docker run -d --name proxy \
              --network app-network \
              -p 80:80 \
              xiangtong/tp-devops-httpd:1.0

          EOF
